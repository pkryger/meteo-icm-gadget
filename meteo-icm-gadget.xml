<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
  <ModulePrefs title="__MSG_title__ __UP_cityName__"
               title_url="http://meteo.icm.edu.pl"
               description="__MSG_description__"
               author="Przemysław Kryger"
               author_email="pkryger+icmweatherforecast@gmail.com"
               directory_title="__MSG_directory_title__"
               screenshot="http://meteo-icm-gadget.googlecode.com/svn/trunk/meteo-icm-gadget-screenshot.png"
               thumbnail="http://meteo-icm-gadget.googlecode.com/svn/trunk/meteo-icm-gadget-thumbnail.png"
               author_location="Kraków, Poland"
               scaling="true"
               height="340"
               scrolling="true">
    <Locale messages="http://meteo-icm-gadget.googlecode.com/svn/trunk/ALL_ALL.xml"/> 
    <Locale lang="pl" messages="http://meteo-icm-gadget.googlecode.com/svn/trunk/pl_ALL.xml"/>
    <Require feature="setprefs"/>
  </ModulePrefs>
  <UserPref name="cityName"
            display_name="__MSG_city__"
            default_value="Kraków"
            datatype="string">
  </UserPref>
  <UserPref name="x"
            display_name="__MSG_x__"
            default_value="91"
            datatype="string">
  </UserPref>
  <UserPref name="y"
            display_name="__MSG_y__"
            default_value="151"
            datatype="string">
  </UserPref>
  <UserPref name="plotLanguage"
            display_name="__MSG_plot_language__"
            default_value="en"
            datatype="enum">
    <EnumValue value="pl"
               display_value="__MSG_plot_language_polish__" />
    <EnumValue value="en"
               display_value="__MSG_plot_language_english__" />
  </UserPref>
  <UserPref name="scaleHeight"
            display_name="__MSG_scale_height__"
            default_value="false"
            datatype="bool"/>
  <UserPref name="scaleWidth"
            display_name="__MSG_scale_width__"
            default_value="false"
            datatype="bool"/>
  <UserPref name="lastImageUrl"
            default_value=""
            datatype="hidden"/>
  <Content type="html">
    <![CDATA[
             <style type="text/css">
                 .progressOut{margin:2px 0;border:1px solid #008000;width:200px;height:10px}
                 #progressIn{background:#00d200;width:0;height:100%}
             </style>
             <div id="meteogram_div">
             </div>
             <!-- Uncoment the following line to see logging messages -->
             <div id="logging_div" style="font-size:8pt; padding:5px;"></div>

             <script type="text/javascript"
                     src="http://meteo-icm-gadget.googlecode.com/svn/trunk/logging.js"></script>
             <script type="text/javascript">
             // The logging stuff
             var log = Logger.getLogger("meteo-icm-main");
             // Uncoment the following line to see logging messages
             Logger.addLoggerOutput(new ColorHTMLLoggerOutput(_gel("logging_div")), Logger.LEVEL_ALL);
             // Uncomment the following line to perform the logging module tests
             //_testLogger(_gel("logging_div"));
             
             var IMAGE_CACHE_TIME = 60 * 60 * 24;
             var PAGE_CACHE_TIME = 20 * 2;
             var BASE_URL = "http://new.meteo.pl/";

             var responseParsed__MODULE_ID__ = false;
             var checkTimeout__MODULE_ID__ = undefined;
             var checkAttempt__MODULE_ID__ = 0;
             var RESPONSE_PARSED_PROGRESS = 10;
             var MANUAL_PROGRESS = RESPONSE_PARSED_PROGRESS + 1;
             var LAST_SAVED_PROGRESS = MANUAL_PROGRESS + 1;
             var TOTAL_PROGRESS = LAST_SAVED_PROGRESS + 1;

             function removeAllChildren(_node) {
                 log.trace("Enter removeAllChildren()", {"_node":_node});
                 if (undefined != _node) {
                     while (_node.hasChildNodes()) {
                         _node.removeChild(_node.firstChild);
                     }
                 } else {
                     log.error("_node is undefined!");
                 }
                 log.trace("Exit removeAllChildren()");
             }

             function setProgress(_progress) {
                 log.trace("Enter setProgress()", {"_progress":_progress});
                 var percent = _progress * (1 / TOTAL_PROGRESS) * 100;
                 var width = percent + "%";
                 var bar = _gel("progressIn");
                 if (undefined != bar) {
                     bar.style.width = width;
                 }
                 log.trace("Exit setProgress()");
             }

             function setImage(_img, _startData) {
                 log.trace("Enter setImage()");
                 setProgress(TOTAL_PROGRESS);
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var cityName = prefs.getString("cityName");
                 var plotLanguage = prefs.getString("plotLanguage");
                 var scaleHeight = prefs.getString("scaleHeight");
                 var scaleWidth = prefs.getString("scaleWidth");
                 var height = true == scaleHeight ? "340" : "660";
                 var width = true == scaleWidth ? "100%" : "660";
                 var titleAlt = prefs.getMsg("forecast_for")
                     + ' '
                     + cityName;
                 _img.setAttribute("border", 0);
                 _img.setAttribute("height", height);
                 _img.setAttribute("width", width);
                 _img.setAttribute("title", titleAlt);
                 _img.setAttribute("alt", titleAlt);
                 var linkUrl = getLinkUrl(_startData);
                 var link = document.createElement("a");
                 link.setAttribute("target", "_blank");
                 link.setAttribute("href", linkUrl);
                 link.appendChild(_img);
                 var div = _gel("meteogram_div");
                 removeAllChildren(div);
                 div.appendChild(link);
                 div.style.width = "100%";
                 div.style.height = "auto";
                 log.trace("Exit setImage()");
             }

             function getLinkUrl(_startData) {
                 log.trace("Enter getLinkUrl()", {"_startData":_startData});
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var sCol = prefs.getString("x"); //TODO
                 var sRow = prefs.getString("y"); //TODO
                 var sPlotLanguage = prefs.getString("plotLanguage");
                 var sCityName = prefs.getString("cityName");
                 var sUrl = BASE_URL
                     + "/php/meteorogram_list_coamps.php?ntype=2n&fdate="
                     + _startData
                     + "&row=" + sRow
                     + "&col=" + sCol
                     + "&lang=" + sPlotLanguage
                     + "&cname=" + sCityName;
                 log.trace("Exit getLinkUrl(): " + sUrl);
                 return sUrl;
             }

             function setErrorPage() {
                 log.trace("Enter setErrorPage()");
                 setProgress(TOTAL_PROGRESS);
                 var errorMessage = createErrorMessage(); 
                 var refreshButton = createRefreshButton();
                 var div = _gel("meteogram_div");
                 removeAllChildren(div);
                 div.appendChild(errorMessage);
                 div.appendChild(document.createElement("br"));
                 div.appendChild(refreshButton);
                 log.trace("Exit setErrorPage()");
             }

             function createErrorMessage() {
                 log.trace("Enter createErrorMessage()");
                 var message = document.createElement("span");
                 message.setAttribute("style", "font-size: 9pt");
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 message.innerHTML = prefs.getMsg("error_cannot_load");
                 log.trace("Exit createErrorMessage(): " + message);
                 return message;
             }

             function createRefreshButton() {
                 log.trace("Enter createRefreshButton()");
                 var buttonSpan = document.createElement("span");
                 buttonSpan.setAttribute("style", "font-size: 9pt;margin:2px");
                 var button = document.createElement("button");
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 button.innerHTML = prefs.getMsg("refresh_button_text");
                 var tooltip = prefs.getMsg("refresh_button_tooltip");
                 button.setAttribute("title", tooltip);
                 button.onclick = new Function("main()");
                 buttonSpan.appendChild(button);
                 log.trace("Exit createRefreshButton(): " + buttonSpan);
                 return buttonSpan;
             }

             function fetchImage(_imageUrl, _startData, _failureCallback) {
                 log.trace("Enter fetchImage()",
                     {"_imageUrl":_imageUrl, "_startData":_startData, "_failureCallback":_failureCallback});
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var img = _IG_GetImage(_imageUrl, {refreshInterval:IMAGE_CACHE_TIME});
                 // TODO image checking is needed for more realiability: if (true == img.complete) {
                 if (true) {
                    prefs.set("lastImageUrl", _imageUrl);
                    prefs.set("lastStartData", _startData);
                    setImage(img, _startData);
                 } else {
                    log.trace("Cannot load the image: " + _imageUrl);
                    _failureCallback();
                 }
                 log.trace("Exit fetchImage()");
             }

             function fetchLastSavedImage() {
                 log.trace("Enter fetchLastSavedImage()");
                 setProgress(LAST_SAVED_PROGRESS);
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var imageUrl = prefs.getString("lastImageUrl");
                 var startData = prefs.getString("lastStartData");
                 if (undefined != imageUrl && imageUrl != "") {
                     // Fallback to error message
                     fetchImage(imageUrl, startData, setErrorPage);
                 } else {
                     log.trace("No last saved image");
                     setErrorPage();
                 }
                 log.trace("Exit fetchLastSavedImage()");
             }

             function fetchImageManually() {
                 log.trace("Enter fetchImageManually()");
                 setProgress(MANUAL_PROGRESS);
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var sPlotLanguage = prefs.getString("plotLanguage");
                 var now = new Date();
                 var sYear = now.getUTCFullYear();
                 var nMonth = now.getUTCMonth();
                 var sMonth = nMonth + 1;
                 var nDay = now.getUTCDate();
                 var sDay = nDay;
                 if (nDay < 10) {
                     sDay = "0" + nDay;
                 }
                 var nHour = now.getUTCHours();
                 var sHour = "00";
                 if (nHour > 21 || nHour < 4) {
                     sHour = "18";
                 } else if (nHour > 3 && nHour < 10) {
                     sHour = "00";
                 } else if (nHour > 9 && nHour < 16) {
                     sHour = "06";
                 } else if (nHour > 15 && nHour < 22) {
                     sHour = "12";
                 } else {
                     log.error("Cannot determine sHour!", {"sHour":sHour});
                 }
                 var sCol = prefs.getString("x"); //TODO
                 var sRow = prefs.getString("y"); //TODO
                 var sStartData = sYear + sMonth + sDay + sStartTime;
                 var sImageUrl = BASE_URL
                     + "metco/mgram_pict.php?ntype=2n&fdate="
                     + sStartData
                     + "&row=" + sRow
                     + "&col=" + sCol
                     + "&lang=" + sPlotLanguage;
                 // Fallback to the last successfully loaded image
                 fetchImage(sImageUrl, sStartData, fetchLastSavedImage);
                 log.trace("Exit fetchImageManually()");
             }
             
             function fetchImageFromResponse(_response) {
                 log.trace("Enter fetchImageFromResponse()");
                 // Mark we already parsed the response, so no other will set up the image
                 responeParsed__MODULE_ID__ = true;
                 clearTimeout(checkTimeout__MODULE_ID__);
                 // Set progress bar
                 setProgress(RESPONSE_PARSED_PROGRESS);
                 var sStartTime = _response.substr(_response.indexOf('var SST="') + 9, 2);
                 var sDay = _response.substr(_response.indexOf('var SDD="') + 9, 2);
                 var sMonth = _response.substr(_response.indexOf('var SMM="') + 9, 2);
                 var sYear = _response.substr(_response.indexOf('var SYYYY="') + 11, 4);
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var sCol = prefs.getString("x"); //TODO
                 var sRow = prefs.getString("y"); //TODO
                 var sPlotLanguage = prefs.getString("plotLanguage");
                 var sStartData = sYear + sMonth + sDay + sStartTime;
                 var sImageUrl = BASE_URL
                     + "metco/mgram_pict.php?ntype=2n&fdate="
                     + sStartData
                     + "&row=" + sRow
                     + "&col=" + sCol
                     + "&lang=" + sPlotLanguage;
                 // Fallback to the manual approach
                 log.trace("sImageUrl = " + sImageUrl)
                 fetchImage(sImageUrl, sStartData, fetchImageManually);
                 log.trace("Exit fetchImageFromResponse()");
             }

             function checkIfResponseParsed() {
                 log.trace("Enter checkIfResponseParsed()");
                 if (false == responseParsed__MODULE_ID__) {
                     checkAttempt__MODULE_ID__++;
                     if (false == responseParsed__MODULE_ID__) {
                         setProgress(checkAttempt__MODULE_ID__);
                         if (false == responseParsed__MODULE_ID__) {
                             if (checkAttempt__MODULE_ID__ <= RESPONSE_PARSED_PROGRESS) {
                                 // make another checking
                                 if (false == responseParsed__MODULE_ID__) {
                                     checkTimeout__MODULE_ID__ = setTimeout(checkIfResponseParsed, 1000);
                                 }
                             } else {
                                 if (false == responseParsed__MODULE_ID__) {
                                     //TODO since error checking doesn't work
                                     // fallback to last successfully loaded image
                                     // rather than: fetchImageManually();
                                     fetchLastSavedImage();
                                 }
                             }
                         }
                     }
                 }
                 log.trace("Exit checkIfResponseParsed()");
             }

             function setInitPage() {
                 log.trace("Enter setInitPage()");
                 var prefs = new _IG_Prefs(__MODULE_ID__);
                 var mainDiv = _gel("meteogram_div");
                 removeAllChildren(mainDiv);
                 var message = document.createElement("span");
                 message.setAttribute("style", "font-size: 9pt");
                 message.innerHTML = prefs.getMsg("loading_data");
                 mainDiv.appendChild(message);
                 var progressBar = document.createElement("div");
                 progressBar.innerHTML = "<div class=\"progressOut\"><div id=\"progressIn\"></div></div>";
                 mainDiv.appendChild(progressBar);
                 log.trace("Exit setInitPage()");
             }

             function resetTimeoutParams() {
                 log.trace("Enter resetTimeoutParams()");
                 responseParsed__MODULE_ID__ = false;
                 checkTimeout__MODULE_ID__ = undefined;
                 checkAttempt__MODULE_ID__ = 0;
                 log.trace("Exit resetTimeoutParams()");
             }

             function main() {
                 log.trace("Enter main()");
                 resetTimeoutParams();
                 setInitPage();
                 checkTimeout__MODULE_ID__ = setTimeout(checkIfResponseParsed, 1000);
                 _IG_FetchContent("blablabla", fetchImageFromResponse, { refreshInterval: PAGE_CACHE_TIME });
                 log.trace("Exit main()");
             }
             _IG_RegisterOnloadHandler(main);
             </script>
    ]]> 
  </Content> 
</Module>
